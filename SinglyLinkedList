#Arham Amir
#281157441
#DSA - C
#Lab 6


from node import Node   

class SinglyLinkedList:
    def __init__(self):
        self.head = None
    def is_empty(self):
        return self.head is None
    def append(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = new_node
            return
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = new_node
    def insert(self, index, data):
        if index < 0:
            print("Index must be non-negative; Try Again!")
            return
        new_node = Node(data)
        if index == 0:
            new_node.next = self.head
            self.head = new_node
            return
        curr = self.head
        pos = 0
        while curr and pos < index - 1:
            curr = curr.next
            pos += 1
        if curr is None:
            print("Index out of bounds")
            return
        new_node.next = curr.next
        curr.next = new_node
    def pop(self, index=None):
        if self.is_empty():
            print("List is Empty!")
            return None
        if index == 0:
            removed = self.head
            self.head = self.head.next
            removed.next = None
            return removed.data
        if index is None:
            prev = None
            curr = self.head
            while curr.next:
                prev = curr
                curr = curr.next
            if prev is None:
                self.head = None
                return curr.data
            prev.next = None
            return curr.data
        if index < 0:
            print("Index must be non-negative; Try Again!")
            return None
        prev = None
        curr = self.head
        pos = 0
        while curr and pos < index:
            prev = curr
            curr = curr.next
            pos += 1
        if curr is None:
            print("Index out of bounds")
            return None
        prev.next = curr.next
        curr.next = None
        return curr.data
    def remove_at_index(self, index):
        return self.pop(index)
    def search(self, data):
        curr = self.head
        pos = 0
        while curr:
            if curr.data == data:
                return pos
            curr = curr.next
            pos += 1
        return -1
    def display(self):
        curr = self.head
        if curr is None:
            print("None")
            return
        while curr:
            print(curr.data, end=" ---> ")
            curr = curr.next
        print("None")
#Driver       
if __name__ == "__main__":
    linked_list = SinglyLinkedList()
    linked_list.append(10)
    linked_list.append(20)
    linked_list.append(30)
    linked_list.display()
    linked_list.insert(1, 15)
    linked_list.display()
    linked_list.pop()
    linked_list.display()
    linked_list.pop(0)
    linked_list.display()
    pos = linked_list.search(20)
    print("Found at index:", pos)
